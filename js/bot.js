// Generated by CoffeeScript 1.4.0
var Bot;

Bot = (function() {

  function Bot(side) {
    console.log("created a new bot!");
    this.name = "Gandalf";
    this.infinity = 99;
    this.side = side;
  }

  Bot.prototype.calculateMove = function(board) {
    var isBoardEmpty, move;
    isBoardEmpty = function(board) {
      var column, row, _i, _j, _len, _len1;
      for (_i = 0, _len = board.length; _i < _len; _i++) {
        column = board[_i];
        for (_j = 0, _len1 = column.length; _j < _len1; _j++) {
          row = column[_j];
          if (row !== '*') {
            return false;
          }
        }
      }
      return true;
    };
    if (isBoardEmpty(board)) {
      return 5;
    }
    console.log("Bot.calculateMove with " + board);
    console.log("about to call Bot.move");
    move = this.search(boardCopy, this.side, 0, -this.infinity, +this.infinity);
    if (move === 0) {
      throw 'ArtificialIntelligence.calculateMove: draw game, no move found.';
    }
    return move;
  };

  Bot.prototype.search = function(board, side, depth, alpha, beta) {
    var bestMove, move, moves, otherside, potentialAlpha, value, _i, _len;
    value = this.nodeValue(board, side);
    if (value !== 0) {
      if (value > 0) {
        return value - depth;
      } else {
        return value + depth;
      }
    }
    moves = this.generateMoves(board);
    if (moves.length === 0) {
      return value;
    }
    otherside = side === 'X' ? 'O' : 'X';
    for (_i = 0, _len = moves.length; _i < _len; _i++) {
      move = moves[_i];
      this.makeMove(board, move, side);
      potentialAlpha = -this.search(board, otherside, depth + 1, -beta, -alpha);
      this.undoMove(board, move);
      if (beta <= alpha) {
        break;
      }
      if (potentialAlpha > alpha) {
        alpha = potentialAlpha;
        if (depth === 0) {
          bestMove = move;
        }
      }
    }
    if (depth !== 0) {
      return alpha;
    } else {
      return bestMove;
    }
  };

  Bot.prototype.nodeValue = function(board, side) {
    var gameResult;
    gameResult = Rules.checkGameOver(board);
    if (gameResult === null || gameResult['draw']) {
      return 0;
    } else if (gameResult['winner'] === side) {
      return this.infinity;
    } else {
      return -this.infinity;
    }
  };

  Bot.prototype.generateMoves = function(board) {
    var column, moves, row, _i, _j, _len, _len1;
    moves = [];
    for (_i = 0, _len = board.length; _i < _len; _i++) {
      column = board[_i];
      for (_j = 0, _len1 = column.length; _j < _len1; _j++) {
        row = column[_j];
        if (row === '*') {
          moves.push([row, column]);
        }
      }
    }
    return moves;
  };

  Bot.prototype.makeMove = function(board, move, side) {
    return board[move[1]][move[0]] = side;
  };

  Bot.prototype.undoMove = function(grid, move) {
    return board[move[1]][move[0]] = "*";
  };

  return Bot;

})();
