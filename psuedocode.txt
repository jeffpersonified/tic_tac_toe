function integer minimax(node, depth)
    if node is a terminal node or depth <= 0:
        return the heuristic value of node
    α = -∞
    for child in node:                       # evaluation is identical for both players 
        α = max(α, -minimax(child, depth-1))
    return α


alpha-beta(player,board,alpha,beta)
    if(game over in current board position)
        return winner

    children = all legal moves for player from this board
    if(max's turn)
        for each child
            score = alpha-beta(other player,child,alpha,beta)
            if score > alpha then alpha = score (we have found a better best move)
            if alpha >= beta then return alpha (cut off)
        return alpha (this is our best move)
    else (min's turn)
        for each child
            score = alpha-beta(other player,child,alpha,beta)
            if score < beta then beta = score (opponent has found a better worse move)
            if alpha >= beta then return beta (cut off)
        return beta (this is the opponent's best move)


# check if at search bound
if node is at depthLimit
   return staticEval(node)

# check if leaf
children = successors(node)
if len(children) == 0
   if node is root
      bestMove = [] 
   return staticEval(node)

# initialize bestMove
if node is root
   bestMove = operator of first child
   # check if there is only one option
   if len(children) == 1
      return None

if it is MAX's turn to move
   for child in children
      result = alphaBetaMinimax(child, alpha, beta)
      if result > alpha
         alpha = result
         if node is root
            bestMove = operator of child
      if alpha >= beta
         return alpha
   return alpha

if it is MIN's turn to move
   for child in children
      result = alphaBetaMinimax(child, alpha, beta)
      if result < beta
         beta = result
         if node is root
            bestMove = operator of child
      if beta <= alpha
         return beta
   return beta
